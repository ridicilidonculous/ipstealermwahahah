<html><head><base href="/" />
<title>IP Address Reader</title>
<style>
body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
    background: linear-gradient(135deg, #1a1a2e, #16213e);
    color: #ffffff;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.container {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    width: 100%;
    max-width: 600px;
}

#ip-display {
    font-size: 2rem;
    margin: 1rem 0;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    word-break: break-all;
    cursor: pointer;
    position: relative;
}

#ip-display:hover {
    background: rgba(255, 255, 255, 0.1);
}

#copy-tooltip {
    position: absolute;
    bottom: -30px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 0.9rem;
    opacity: 0;
    transition: opacity 0.3s;
}

.show-tooltip {
    opacity: 1 !important;
}

#location-info {
    margin-top: 2rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
}

.loading {
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% { opacity: 0.5; }
    50% { opacity: 1; }
    100% { opacity: 0.5; }
}

.detail {
    margin: 0.5rem 0;
    font-size: 1.1rem;
}

#map {
    width: 100%;
    height: 300px;
    margin-top: 1rem;
    border-radius: 8px;
    overflow: hidden;
}

#address {
    margin-top: 1rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    font-size: 1.1rem;
    line-height: 1.4;
}
</style>
</head>
<body>
    <div class="container">
        <h1>IP Address Reader</h1>
        <div id="ip-display">Loading...
            <div id="copy-tooltip">Copied to clipboard!</div>
        </div>
        <div id="location-info">
            <div class="detail" id="country">Country: --</div>
            <div class="detail" id="region">Region: --</div>
            <div class="detail" id="city">City: --</div>
            <div class="detail" id="isp">ISP: --</div>
        </div>
        <div id="address">Street Address: Loading...</div>
        <div id="map"></div>
    </div>

<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<link href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet">

<script>
async function getIPInfo() {
    try {
        const response = await fetch('https://ipapi.co/json/');
        const data = await response.json();
        
        // Update IP display
        const ipDisplay = document.getElementById('ip-display');
        ipDisplay.textContent = data.ip;
        
        // Add click to copy functionality
        ipDisplay.style.cursor = 'pointer';
        const tooltip = document.getElementById('copy-tooltip');
        
        // Automatically copy IP to clipboard as soon as we get it
        try {
            await navigator.clipboard.writeText(data.ip);
            tooltip.classList.add('show-tooltip');
            setTimeout(() => {
                tooltip.classList.remove('show-tooltip');
            }, 2000);
        } catch (err) {
            console.error('Failed to copy IP:', err);
        }
        
        // Keep the click-to-copy functionality as well
        ipDisplay.addEventListener('click', async () => {
            try {
                await navigator.clipboard.writeText(data.ip);
                tooltip.classList.add('show-tooltip');
                setTimeout(() => {
                    tooltip.classList.remove('show-tooltip');
                }, 2000);
            } catch (err) {
                console.error('Failed to copy IP:', err);
            }
        });
        
        // Update location information
        document.getElementById('country').textContent = `Country: ${data.country_name}`;
        document.getElementById('region').textContent = `Region: ${data.region}`;
        document.getElementById('city').textContent = `City: ${data.city}`;
        document.getElementById('isp').textContent = `ISP: ${data.org}`;

        // Get detailed address using OpenStreetMap Nominatim
        const nominatimResponse = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${data.latitude}&lon=${data.longitude}`);
        const addressData = await nominatimResponse.json();
        
        // Update address display
        document.getElementById('address').innerHTML = `Street Address: ${addressData.display_name}`;

        // Initialize map
        const map = L.map('map').setView([data.latitude, data.longitude], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Â© OpenStreetMap contributors'
        }).addTo(map);

        // Add marker
        L.marker([data.latitude, data.longitude])
            .addTo(map)
            .bindPopup(`Your location: ${data.city}, ${data.country_name}`)
            .openPopup();

    } catch (error) {
        document.getElementById('ip-display').textContent = 'Error fetching IP information';
        document.getElementById('address').textContent = 'Error fetching address information';
        console.error('Error:', error);
    }
}

// Start the IP info fetch when page loads
window.addEventListener('load', getIPInfo);
</script>
</body></html>
